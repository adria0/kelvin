use std::marker::PhantomData;
use std::mem;

use cache::Cached;
use smallvec::SmallVec;

use crate::content::Content;
use crate::handle::HandleRef;
use crate::search::Method;
use crate::ByteHash;

use crate::branch::{Found, STACK_BRANCH_MAX_DEPTH};

// A possibly unfinished branch
struct PartialBranchMut<'a, C, H>(
    SmallVec<[LevelMut<'a, C, H>; STACK_BRANCH_MAX_DEPTH]>,
);

pub struct BranchMut<'a, C, H>(
    SmallVec<[LevelMut<'a, C, H>; STACK_BRANCH_MAX_DEPTH]>,
);

struct LevelMut<'a, C, H> {
    ofs: usize,
    node: &'a mut C,
    _marker: PhantomData<H>,
}

impl<'a, C, H> LevelMut<'a, C, H>
where
    C: Content<H>,
    H: ByteHash,
{
    fn new(node: &'a mut C) -> Self {
        LevelMut {
            ofs: 0,
            node,
            _marker: PhantomData,
        }
    }

    fn leaf(&self) -> Option<&C::Leaf> {
        match (*self.node).children()[self.ofs].inner() {
            HandleRef::Leaf(l) => Some(l),
            _ => None,
        }
    }

    fn referencing(&'a self) -> HandleRef<'a, C, H> {
        match self.node.children().get(self.ofs) {
            Some(child) => child.inner(),
            None => HandleRef::None,
        }
    }

    fn search<M: Method>(&mut self, method: &mut M) -> Found {
        match method.select(&self.node.children()[self.ofs..]) {
            Some(i) => {
                self.ofs += i;
                match self.referencing() {
                    HandleRef::Leaf(_) => Found::Leaf,
                    HandleRef::Node(_) => Found::Node,
                    HandleRef::None => Found::Nothing,
                }
            }
            None => Found::Nothing,
        }
    }
}

impl<'a, C, H> PartialBranchMut<'a, C, H>
where
    C: Content<H>,
    H: ByteHash,
{
    fn new(node: <'a, C>) -> Self {
        let mut levels = SmallVec::new();
        levels.push(Level::new(node));
        PartialBranch(levels)
    }

    fn leaf(&self) -> Option<&C::Leaf> {
        self.0.last()?.leaf()
    }

    fn valid(&self) -> bool {
        match self.0.last() {
            Some(level) => level.leaf().is_some(),
            None => false,
        }
    }

    fn advance(&mut self) {
        self.0.last_mut().map(|level| level.ofs += 1);
    }

    pub fn advance_search<M: Method>(&mut self, method: &mut M) {
        loop {
            if let Some(last) = self.0.last_mut() {
                let mut push = None;
                match last.search(method) {
                    Found::Leaf => {
                        println!("found leaf");
                        break;
                    }
                    Found::Node => match last.referencing() {
                        HandleRef::Node(cached) => {
                            // TODO: motivate unsafe
                            let level: Level<'a, _, _> =
                                unsafe { mem::transmute(Level::new(cached)) };
                            push = Some(level);
                        }
                        _ => unreachable!(),
                    },
                    Found::Nothing => {
                        self.0.pop();
                        self.advance();
                    }
                }
                if let Some(level) = push.take() {
                    self.0.push(level);
                }
            } else {
                break;
            }
        }
    }
}

impl<'a, C, H> Into<Option<BranchMut<'a, C, H>>> for PartialBranchMut<'a, C, H>
where
    C: Content<H>,
    H: ByteHash,
{
    fn into(self) -> Option<BranchMut<'a, C, H>> {
        if self.valid() {
            Some(BranchMut(self.0))
        } else {
            None
        }
    }
}
